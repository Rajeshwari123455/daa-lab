#include <iostream>
#include <vector>
#include <queue>
using namespace std;

// Edge structure to represent graph edges
struct Edge {
    int dest, weight;
};

// Function to add an edge to the graph
void addEdge(vector<vector<Edge>>& graph, int src, int dest, int weight) {
    graph[src].push_back({dest, weight});
    graph[dest].push_back({src, weight});
}

// Function to find the minimum cost spanning tree using Dijkstra's algorithm
int primMST(vector<vector<Edge>>& graph) {
    int V = graph.size();
    vector<bool> visited(V, false);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    int minCost = 0;

    // Start from vertex 0 (you can choose any starting vertex)
    pq.push(make_pair(0, 0));

    while (!pq.empty()) {
        int u = pq.top().second;
        int weight = pq.top().first;
        pq.pop();

        if (visited[u]) {
            continue;
        }

        minCost += weight;
        visited[u] = true;

        for (const auto& edge : graph[u]) {
            int v = edge.dest;
            int weight = edge.weight;
            if (!visited[v]) {
                pq.push(make_pair(weight, v));
            }
        }
    }

    return minCost;
}

int main() {
    int V, E;
    cout << "Enter the number of vertices in the graph: ";
    cin >> V;
    cout << "Enter the number of edges in the graph: ";
    cin >> E;

    vector<vector<Edge>> graph(V);

    cout << "Enter " << E << " edges in the format (src, dest, weight):" << endl;
    for (int i = 0; i < E; ++i) {
        int src, dest, weight;
        cin >> src >> dest >> weight;
        addEdge(graph, src, dest, weight);
    }

    int minCost = primMST(graph);

    cout << "Minimum Cost Spanning Tree: " << minCost << endl;

    return 0;
}
