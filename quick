#include <iostream>
#include <ctime>
using namespace std;

// Function to swap two elements in an array
void swap(int& a, int& b) {
    int temp = a;
    a = b;
    b = temp;
}

// Function to partition the array and return the pivot index
int partition(int arr[], int low, int high, int& basicOperations) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j <= high - 1; ++j) {
        basicOperations++; // Counting basic operations
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }

    swap(arr[i + 1], arr[high]);
    return i + 1;
}

// Function to perform quicksort
void quickSort(int arr[], int low, int high, int& basicOperations) {
    if (low < high) {
        int pivotIndex = partition(arr, low, high, basicOperations);

        quickSort(arr, low, pivotIndex - 1, basicOperations);
        quickSort(arr, pivotIndex + 1, high, basicOperations);
    }
}

int main() {
    const int numExperiments = 5;

    for (int experiment = 1; experiment <= numExperiments; ++experiment) {
        int N;
        cout << "Experiment " << experiment << endl;
        cout << "Enter the number of elements in the array: ";
        cin >> N;

        int* arr = new int[N];

        cout << "Enter " << N << " integer elements: ";
        for (int i = 0; i < N; ++i) {
            cin >> arr[i];
        }

        int basicOperations = 0;
        clock_t startTime = clock();

        // Call the quicksort function
        quickSort(arr, 0, N - 1, basicOperations);

        clock_t endTime = clock();
        double timeTaken = double(endTime - startTime) / CLOCKS_PER_SEC;

        cout << "Sorted array: ";
        for (int i = 0; i < N; ++i) {
            cout << arr[i] << " ";
        }
        cout << endl;

        cout << "Time taken for sorting: " << timeTaken << " seconds." << endl;
        cout << "Number of basic operations executed: " << basicOperations << endl;

        delete[] arr;
    }

    return 0;
}
